\documentclass[12pt,letterpaper]{article}
 \usepackage[left=2cm,right=2cm,top=2cm,bottom=2cm]{geometry}
\usepackage[ansinew]{inputenc}
\usepackage[spanish]{babel}
\usepackage{amsmath}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{dsfont}
\usepackage{multicol} 
\usepackage{subfigure}
\usepackage{graphicx}
\usepackage{float} 
\usepackage{verbatim} 
\usepackage[left=2cm,right=2cm,top=2cm,bottom=2cm]{geometry}
\usepackage{fancyhdr}
\pagestyle{fancy} 
\fancyhead[LO]{\leftmark}
\usepackage{caption}
\newtheorem{definicion}{Definci\'on}

\begin{document}

\begin{titlepage}
\setlength{\unitlength}{1 cm} %Especificar unidad de trabajo

\begin{center}
\textbf{{\large UNIVERSIDAD DE EL SALVADOR}\\
{\large FACULTAD MULTIDISCIPLINARIA DE OCCIDENTE}\\
{\large DEPARTAMENTO DE MATEM\'ATICA}}\\ [0.50 cm]

\begin{picture}(18,4)
 \put(7,0){\includegraphics[width=4cm]{minerva.jpg}}
\end{picture}
\\[0.25 cm]

\textbf{{\large Licenciatura en Estad\'istica}\\ [1.25cm]
{\large Control Estad\'istico del Paquete R }\\ [2 cm]
%\setlength{\unitlength}{1 cm}
{\large  \textbf{''UNIDAD UNO"}}\\ [3 cm]
{\large Alumna:}\\
{\large Erika Beatr\'iz Guill\'en Pineda}\\ [2cm]
{\large Fecha de elaboraci\'on}\\
Santa Ana - \today }
\end{center}
\end{titlepage}

\newtheorem{teorema}{Teorema}
\newtheorem{prop}{Proposici\'on}[section]

\lhead{Pr\'actica 04}

\lfoot{LICENCIATURA EN ESTAD\'ISTICA}
\cfoot{UESOCC}
\rfoot{\thepage}
%\pagestyle{fancy} 

\setcounter{page}{1}
\newpage

\section{IMPORTACI\'ON Y EXPORTACI\'ON DE DATOS EN R}

Generalmente los datos suelen leerse desde archivos externos y no teclearse desde la consola. Las capacidades de lectura de archivos de R son sencillas y sus requisitos son bastante estrictos, por lo que hay que tenerlas muy en cuenta, de lo contrario los resultados en la lectura no ser\'an los esperados.
\subsection{USO DE LA FUNCI\'ON READ.TABLE()}
\begin{itemize}
\item Ejemplo: Guardar (escribir) determinados datos en un archivo de texto (ASCII) y luego recuperar
(leer) dicho archivo desde R.
\end{itemize}
\begin{itemize}
\item {1) } Cambiar el directorio de trabajo a su directorio de trabajo, en el cual ha almacenado sus
pr?cticas, desde el men\'u File.
\item {2) } Abrir el R Editor para crear un nuevo script desde el men\'u File.
\item {3) } En la ventana del R Editor, teclee los datos tal como se muestra:
\end{itemize}
Observaciones:
\begin{itemize}
\item La primera l\'inea del archivo debe contener el nombre de cada objeto o variable.
\item En cada una de las siguientes l?neas, el primer elemento es la etiqueta de la fila, y a continuaci\'on deben aparecer los valores de cada variable.
\item Si el archivo tiene un elemento menos en la primera l\'inea que en las restantes,
obligatoriamente se\'i el dise\~no anterior el que se utilice.
\item A menudo no se dispone de etiquetas de filas. En ese caso, tambi\'en es posible la lectura y el
programa a\'~nadir? unas etiquetas predeterminadas.
\item La \'ultima l\'inea debe finalizar con ENTER para que R reconozca el fin del archivo.
\end{itemize}
\begin{itemize}
\item{4) } Oprimir con el puntero del rat\'on el icono que representa un disquete (Save script as) y guarde el archivo con el nombre "datos01.txt". Tambi\'en puede darle el nombre de "datos01.dat" (otro formato soportado por la funci\'on read.table), e incluso puede leer datos directamente desde una p\'agina de internet, solamente proporcionando la direcci\'on URL completa
\end{itemize}

\newpage
\begin{itemize}
\item{5) } Recuperar los objetos o datos guardados en el archivo "datos01.txt" 
\end{itemize}
<<>>=
Entrada1 <- read.table("datos01.txt", header=T);Entrada1
Entrada2 <- read.table("datos01.dat", header=T);Entrada2

# No existe diferencia entre ambos archivos a la hora de leerlos
@
NOTA: La funci\'on read.table() lee los datos y los almacena en una hoja de datos (data.frame), si b\'usqueda.
\begin{itemize}
\item{6) } Leer los datos contenidos en el archivo "airline.dat" 
\end{itemize}
<<>>=
airline <- read.table("airline.dat",nrows = 20);airline
# Note que la instrucci\'on header=T es por defecto y puede omitirla (R reconocer? 
# siempre que en la primera l?nea se encuentran los nombres de las variables).
@
La sintaxis completa de la funci\'on read.table() es:\\

read.table(file, header = FALSE, sep = "", quote = "\"'", dec = ".", row.names, col.names, 
as.is =FALSE, na.strings = "NA", colClasses = NA, nrows = -1, skip = 0, 
check.names = TRUE, fill =!blank.lines.skip, strip.white = FALSE, blank.lines.skip = TRUE, 
comment.char = "#")

\section{USO DE LA FUNCI\'ON SCAN()}
La funci\'on scan() es m\'as flexible que read.table() y permite realizar lecturas m?s complejas, como puede consultar en la ayuda: help(scan)
\begi{itemize}
\item Ejemplo 1: Leer s\'olo las dos primeros objetos o columnas del archivo "datos01.txt"
\end{itemize}
<<>>=
Edat1 <- scan("datos01.txt", list(X1=0, X2=0), skip = 1, flush = TRUE, quiet = TRUE);
Edat1
Edat2<- scan("datos01.dat", list(X1=0, X2=0), skip = 1, flush = TRUE, quiet = TRUE);
Edat2
# Observe que en list(X1=0, X2=0) se les da el nombre a las dos primeras 
# columnas o variables (puede darle el nombre que crea m\'as conveniente) y se 
# indica que son variables num\'ericas; sin embargo, del archivo \'unicamente se 
# leen las dos primeras columnas, si se quisiera leer las columnas primera y 
# tercera, nos ver\'iamos obligados a leer las tres primeras

# Note que si escribimos list(0, 0), indica que se leer\'an las dos primeras 
# columnas del archivos y que los datos le?dos son num\'ericos (asigna nombres 
# por defecto). Para indicar que los datos que se leen son cadenas se utiliza
# "" en lugar de 0.
@
\newpage
\begin{itemize}
\item Ejemplo 2: Crear un archivo con la funci\'on cat() y luego recuperarlo
\end{itemeze}
<<>>=
cat("TITULO L\'inea extra", "2 3 5 7", "11 13 17", file="datos02.txt", sep="\n")

# El archivo lo recuperamos con la funci\'on scan():
pp <- scan("datos02.txt", skip = 1, quiet= TRUE);pp

# La funci?n scan es muy \'util cuando en el archivo de datos a importar 
# cada l?nea representa un ?nico caso. En caso contrario (cada cierta
# cantidad de columnas representa un caso) es mucho m\'as f\'acil y 
# recomendable utilizar la funci\'on read.table.
@
La sintaxis completa de la funci?n scan() es:\\

scan(file = "", what = double(0), nmax = -1, n = -1, sep = "", quote = if (sep=="\n") "" else "'\"", dec
= ".", skip = 0, nlines = 0, na.strings = "NA", flush = FALSE, fill = FALSE, strip.white = FALSE,
quiet = FALSE, blank.lines.skip = TRUE, multi.line = TRUE, comment.char = "#")
\section{USO DE LA FUNCI\'AN READ.CSV()}
Leer un conjunto de datos de Microsoft Excel pero los datos no est\'an almacenados en el formato
conocido de Excel ".xls", sino m\'as bien un formato menos conocido como ".csv".
\begin {itemize}
\item {1) } Ingresar al Microsoft Excel y crear la hoja de datos siguiente:\\
Observe que debe guardar la hoja Excel en su directorio de trabajo y que el archivo debe ser de
tipo: CSV(delimitado por comas)
\item 2) Regresar al entorno de R y recuperar el archivo "HojaE1.csv".
\end{itemize}
<<>>=
hojaR <- read.csv("HojaE1.csv", sep = ";", strip.white = TRUE)
hojaR
@
\textbf{Note que R ha reemplazado "-" en los encabezados de las columnas por "."; en general
reemplazar\'a cualquier car\'acter.}
\newpage
Puede investigar el tipo de objeto que es hojaR con:
<<>>=
is.matrix(hojaR); 
is.list(hojaR); 
is.data.frame(hojaR)
@
Acceda a la componente Producto de hojaR con:
<<>>=
hojaR$Producto
@
Observe que R toma est\'a columna (variable de caracteres) como un Factor Nominal,
verif\'iquelo tecleando:
<<>>=
is.vector(hojaR$Producto); 
is.factor(hojaR$Producto)
@
Qu\'e tipo de objeto es la columna Cantidad.S1?
<<>>=
is.vector(hojaR$Cantidad.S1); 
is.factor(hojaR$Cantidas.S1)
@

\newpage
\section{USO DEL PAQUETE RODBC}
Si por el contrario los datos a los cuales deseamos realizar el an?lisis estad?stico se encuentran en
formato XLS (versi\'on 2003 de Microsoft Excel), debemos de seguir los siguientes pasos
(Ilustraremos el procedimiento con el archivo "contaminaci\'on-mexico.xls"):
\begin{itemize}

\item Instalar el paquete RODBC, con la siguiente instrucci\'on 
<<>>=
install.packages(c("RODBC")) 
# O desde el men\'u como en el caso de la instalaci\'on del paquete Foreing.
# Con este procedimiento se instalan los paquetes directamente desde internet, 
# es necesario para ello contar con una conexi\'on a internet en el momento. 
# Posteriormente se selecciona un mirror (un servidor desde el cual se 
# descargar\'an los paquetes), y finalmente buscar el paquete deseado del listado.

@
\item Cargar el paquete con la siguiente instrucci\'on:
<<>>=
library(RODBC)
@
\item Seleccionar el archivo (el cual puede contener m?s de una hoja de datos)"contaminaci\'on-mexico.xls", con la instrucci\'on:
<<>>=
datos.xls <- odbcConnectExcel(file.choose())
@
\item Seleccionar la hoja en la cual se encuentran los datos 
<<>>=
# datoshoja1.xls <- sqlFetch(datos.xls,"contaminacion-mexico")
# Con esta instrucci\'on se indica la hoja en la cual se encuentran los 
# datos con los que se desea trabajar (contaminaci?n_mexico) 
# o cargar en R. Siempre es necesario especificarlo.
@
\item Realizar los an\'alisis o c\'alculos correspondientes
\end{itemize}

\newpage
\section{IMPORTAR DATOS DE SPSS HACIA R}
A parte de leer archivos en formato texto y delimitados por comillas, R permite leer datos en una gran variedad de formato entre ellos se encuentra archivos el formato de SPSS ".sav". Para poder leerlos primero debemos de cargar el paquete correspondiente en el cual se encuentran la funci\'on que nos permitir? leer los ficheros de datos. Para el caso de SPSS, debe cargar el paquete foreign. El cual es necesario para lectura y escritura de datos.\\\\
Para leer los datos se usa la siguiente funci\'on Read.spss("nombreArchivo", use.values.labels.=FALSE, max.value.label=Inf, to.data.frame=T); donde use.values.labels=TRUE significa que si en el archivo existen variables categ\'oricas que han sido previamente codificadas con su respectiva etiqueta, entonces se leer\'an directamente las etiquetas y no los valores de esta (por ejemplo, si 1 representa Femenino, se leer? Femenino en lugar de 1). to.data.frame =T indica que los datos ser?n almacenados en un data.frame, muy recomendable para an?lisis estad\'istico. Puede consultar m\'as ayuda de la funci\'on con la instrucci\'on help(read.spss).
\begin{itemize}
\item Instalar el paquete foreign, con la siguiente instrucci\'on 
<<>>=
install.packages(c("foreign"))
@
\item Cargar el paquete con la siguiente instrucci\'on:
<<>>=
library(foreign)
@
\item Leer el contenido del archivo "demo.sav", con la instrucci\'on:
<<>>=
#read.spss("demo.sav", use.value.labels=TRUE, max.value.label=Inf, to.data.frame=T)
@
\item Realizar los an?lisis o c\'alculos correspondientes.
\end{itemize}


\end{document}